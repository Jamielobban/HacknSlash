//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/MenuInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuInputs"",
    ""maps"": [
        {
            ""name"": ""UiInputs"",
            ""id"": ""37af1a06-614c-4383-b041-2d600f3ddf5a"",
            ""actions"": [
                {
                    ""name"": ""MoveThorughUI"",
                    ""type"": ""Value"",
                    ""id"": ""a5714f5e-34b0-4d33-9055-17c0b8ef84ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UiElementMovement"",
                    ""type"": ""Button"",
                    ""id"": ""02f75908-f748-46ca-9d06-77c49aa86204"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ButtonInteract"",
                    ""type"": ""Button"",
                    ""id"": ""46541f74-7723-47e7-8258-bcffb7ae2533"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpinPyramidLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e3479f32-9ef6-4e53-93b2-e34826bb4463"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpinPyramidRight"",
                    ""type"": ""Button"",
                    ""id"": ""ee42888f-8f22-4c72-b030-1739c46dbc85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0630a65f-33f1-41fc-b5bf-e6d7d903fe19"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveThorughUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e803cfcb-ab42-4f8d-9b70-c75642e123c8"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UiElementMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b35662dd-2728-4e49-8d35-ebdb1505eaaf"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""138fc5a8-6caf-4e9a-b6c3-00570093f871"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpinPyramidLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dadb86d-acfc-434b-b39a-c6745b36b01d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpinPyramidRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UiInputs
        m_UiInputs = asset.FindActionMap("UiInputs", throwIfNotFound: true);
        m_UiInputs_MoveThorughUI = m_UiInputs.FindAction("MoveThorughUI", throwIfNotFound: true);
        m_UiInputs_UiElementMovement = m_UiInputs.FindAction("UiElementMovement", throwIfNotFound: true);
        m_UiInputs_ButtonInteract = m_UiInputs.FindAction("ButtonInteract", throwIfNotFound: true);
        m_UiInputs_SpinPyramidLeft = m_UiInputs.FindAction("SpinPyramidLeft", throwIfNotFound: true);
        m_UiInputs_SpinPyramidRight = m_UiInputs.FindAction("SpinPyramidRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UiInputs
    private readonly InputActionMap m_UiInputs;
    private List<IUiInputsActions> m_UiInputsActionsCallbackInterfaces = new List<IUiInputsActions>();
    private readonly InputAction m_UiInputs_MoveThorughUI;
    private readonly InputAction m_UiInputs_UiElementMovement;
    private readonly InputAction m_UiInputs_ButtonInteract;
    private readonly InputAction m_UiInputs_SpinPyramidLeft;
    private readonly InputAction m_UiInputs_SpinPyramidRight;
    public struct UiInputsActions
    {
        private @MenuInputs m_Wrapper;
        public UiInputsActions(@MenuInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveThorughUI => m_Wrapper.m_UiInputs_MoveThorughUI;
        public InputAction @UiElementMovement => m_Wrapper.m_UiInputs_UiElementMovement;
        public InputAction @ButtonInteract => m_Wrapper.m_UiInputs_ButtonInteract;
        public InputAction @SpinPyramidLeft => m_Wrapper.m_UiInputs_SpinPyramidLeft;
        public InputAction @SpinPyramidRight => m_Wrapper.m_UiInputs_SpinPyramidRight;
        public InputActionMap Get() { return m_Wrapper.m_UiInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UiInputsActions set) { return set.Get(); }
        public void AddCallbacks(IUiInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_UiInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UiInputsActionsCallbackInterfaces.Add(instance);
            @MoveThorughUI.started += instance.OnMoveThorughUI;
            @MoveThorughUI.performed += instance.OnMoveThorughUI;
            @MoveThorughUI.canceled += instance.OnMoveThorughUI;
            @UiElementMovement.started += instance.OnUiElementMovement;
            @UiElementMovement.performed += instance.OnUiElementMovement;
            @UiElementMovement.canceled += instance.OnUiElementMovement;
            @ButtonInteract.started += instance.OnButtonInteract;
            @ButtonInteract.performed += instance.OnButtonInteract;
            @ButtonInteract.canceled += instance.OnButtonInteract;
            @SpinPyramidLeft.started += instance.OnSpinPyramidLeft;
            @SpinPyramidLeft.performed += instance.OnSpinPyramidLeft;
            @SpinPyramidLeft.canceled += instance.OnSpinPyramidLeft;
            @SpinPyramidRight.started += instance.OnSpinPyramidRight;
            @SpinPyramidRight.performed += instance.OnSpinPyramidRight;
            @SpinPyramidRight.canceled += instance.OnSpinPyramidRight;
        }

        private void UnregisterCallbacks(IUiInputsActions instance)
        {
            @MoveThorughUI.started -= instance.OnMoveThorughUI;
            @MoveThorughUI.performed -= instance.OnMoveThorughUI;
            @MoveThorughUI.canceled -= instance.OnMoveThorughUI;
            @UiElementMovement.started -= instance.OnUiElementMovement;
            @UiElementMovement.performed -= instance.OnUiElementMovement;
            @UiElementMovement.canceled -= instance.OnUiElementMovement;
            @ButtonInteract.started -= instance.OnButtonInteract;
            @ButtonInteract.performed -= instance.OnButtonInteract;
            @ButtonInteract.canceled -= instance.OnButtonInteract;
            @SpinPyramidLeft.started -= instance.OnSpinPyramidLeft;
            @SpinPyramidLeft.performed -= instance.OnSpinPyramidLeft;
            @SpinPyramidLeft.canceled -= instance.OnSpinPyramidLeft;
            @SpinPyramidRight.started -= instance.OnSpinPyramidRight;
            @SpinPyramidRight.performed -= instance.OnSpinPyramidRight;
            @SpinPyramidRight.canceled -= instance.OnSpinPyramidRight;
        }

        public void RemoveCallbacks(IUiInputsActions instance)
        {
            if (m_Wrapper.m_UiInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUiInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_UiInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UiInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UiInputsActions @UiInputs => new UiInputsActions(this);
    public interface IUiInputsActions
    {
        void OnMoveThorughUI(InputAction.CallbackContext context);
        void OnUiElementMovement(InputAction.CallbackContext context);
        void OnButtonInteract(InputAction.CallbackContext context);
        void OnSpinPyramidLeft(InputAction.CallbackContext context);
        void OnSpinPyramidRight(InputAction.CallbackContext context);
    }
}
